//// var buttonColours = ["red", "blue", "green", "yellow"];: This defines an array called buttonColours which contains four strings representing the colors of the buttons in the game. These colors are "red", "blue", "green", and "yellow"

var buttonColours = ["red", "blue", "green", "yellow"];

///These define two arrays, gamePattern and userClickedPattern, which will store the sequence of colors generated by the game and the sequence of colors clicked by the user, respectively.
var gamePattern = [];
var userClickedPattern = [];

///These define two variables, started and level, which are used to keep track of the game state. started is initially set to false, indicating that the game has not started yet, and level is initially set to 0, indicating the current level of the game.
var started = false;
var level = 0;

///This is an event listener that listens for a keypress event on the document (the webpage). When a keypress event occurs, the function inside the curly braces is executed.

///This function checks if the game has not started yet (!started), and if so, it updates the level title on the webpage, calls the nextSequence() function to start the game, and sets started to true.
$(document).keypress(function () {
  if (!started) {
    $("#level-title").text("Level " + level);
    nextSequence();
    started = true;
  }
});

//// This is an event listener that listens for a click event on elements with the class "btn" (which are the colored buttons in the game).
///When a click event occurs on a button, the function inside the curly braces is executed.

$(".btn").click(function () {
  ///This function gets the ID of the clicked button
  var userChosenColour = $(this).attr("id");
  // adds it to the userClickedPattern array,
  userClickedPattern.push(userChosenColour);
  console.log(userClickedPattern);

  ///plays a sound
  playSound(userChosenColour);
  ///and adds a visual effect to the clicked button,
  animatePress(userChosenColour);
  //and then calls the checkAnswer() function to check if the clicked pattern matches the game pattern.
  checkAnswer(userClickedPattern.length - 1);
});

////This function checks if the color clicked by the user at the current level matches the color in the game pattern at the current level.
function checkAnswer(currentLevel) {
  ///If the colors match and the user has clicked all the colors in the current game pattern, it calls the nextSequence() function to generate the next color in the game pattern.
  if (gamePattern[currentLevel] === userClickedPattern[currentLevel]) {
    if (userClickedPattern.length === gamePattern.length) {
      /// if the player has reached a sequence of 20
      if (gamePattern.length === 20) {
        //The text of the HTML element with the ID level-title will be changed to "Wow! You made it!" using the text() method from the jQuery library.
        $("#level-title").text("Wow! You made it!");
        //and calls the startOver() function to reset the game
        setTimeout(function () {
          startOver();
          nextSequence();
          ///and updates the level title on the webpage.
          $("#level-title").text("Press A Key to Start");
        }, 1000);
          
        //and calls the startOver() function to reset the game
      } else {
        setTimeout(function () {
          nextSequence();
        }, 1000);
      }
    }

    /////If the colors do not match, it plays a "wrong" sound, adds a visual effect to indicate game over, updates the level title,
  } else {
    playSound("wrong");
    $("body").addClass("game-over");
    $("#level-title").text("Game Over, Press Any Key to Restart");

    setTimeout(function () {
      $("body").removeClass("game-over");
    }, 200);
    //and calls the startOver() function to reset the game
    startOver();
  }
}

///This function generates the next color in the game pattern by randomly selecting a color from the buttonColours array,
function nextSequence() {
  //It sets the userClickedPattern array to an empty array so that it is ready to receive the user's input for the next sequence.
  userClickedPattern = [];
  //t increments the level variable by 1 to indicate that the user has advanced to the next level.
  level++;
  ///The text of the HTML element with the ID level-title will be changed to "Level " + level, using the text() method from the jQuery library.
  $("#level-title").text("Level " + level);
  //It generates a random number between 0 and 3 using the Math.random() and Math.floor() functions.
  var randomNumber = Math.floor(Math.random() * 4);
  //It uses the random number to select a random color from the buttonColours array and assigns it to the randomChosenColour variable.
  var randomChosenColour = buttonColours[randomNumber];
  //t adds the randomChosenColour to the end of the gamePattern array to store the correct sequence of button presses for the game.
  gamePattern.push(randomChosenColour);
  ///It animates the button with the ID matching the randomChosenColour by using the fadeIn() and fadeOut() methods from the jQuery library. This creates a visual effect of the button flashing.
  $("#" + randomChosenColour)
    .fadeIn(100)
    .fadeOut(100)
    .fadeIn(100);
  //It plays a sound corresponding to the randomChosenColour using the playSound() function.
  playSound(randomChosenColour);
}

////This function adds a visual effect to the button with the current color by adding the class "pressed" to the button, which changes its appearance. 
function animatePress(currentColor) {
  $("#" + currentColor).addClass("pressed");
  //After a short delay, it removes the "pressed" class to revert the button's appearance to normal.
  setTimeout(function () {
    $("#" + currentColor).removeClass("pressed");
  }, 100);
}

//It creates a new Audio object and assigns it to the audio variable.
function playSound(name) {
  //It sets the source of the audio object to "sounds/" + name + ".mp3", where name is the argument passed to the function. This creates a path to the sound file based on its name.
  var audio = new Audio("sounds/" + name + ".mp3");
  ///It calls the play() method on the audio object to play the sound.
  audio.play();
}
//// This function resets the game by setting the level and gamePattern variables to their initial values and setting started to false.
function startOver() {
  //t sets the level variable to 0. This variable keeps track of the current level of the game, so setting it to 0 effectively restarts the game at level 1.
  level = 0;
  //It sets the gamePattern variable to an empty array. This variable stores the pattern of colors that the game generates, so resetting it clears out any previous patterns.
  gamePattern = [];
  //It sets the started variable to false. This variable is used to keep track of whether the game has been started or not. By setting it to false, we ensure that the game does not automatically start after it has been reset.
  started = false;
}
